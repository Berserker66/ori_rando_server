from jinja2 import Template
from Types import *
from seedbuilder import oriparse
from typing import Dict, Set
from collections import Counter
import os

starting_id = 2**18
current_loc_id = starting_id
current_item_id = starting_id

result = oriparse.ori_load_file(os.path.join("seedbuilder", "areas.ori"), True)

locations_data = {}
items = {}
default_pool = Counter()
for name in sorted(result["locs"]):
    item = result["locs"][name]["item"]
    if item.startswith(("EV", "SK")):
        item = item[2:]
    if item == "Mapstone":
        item = "MapStone"
    locations_data[name] = Location(current_loc_id, item)
    current_loc_id += 1
    if item not in items:
        items[item] = current_item_id
        current_item_id += 1
    default_pool[item] += 1

print(sum(default_pool.values()), len(locations_data))
location_rules = {}

connection_rules: Dict[str, Dict[str, Set[str]]] = {}

connectors: Dict[str, str] = {}


cell_conversions = {
    "Health": "HC",
    "Ability": "AC",
    "Keystone": "KS",
    "Energy": "EC"
}

starting_assumptions = {
    "Health": 3,
    "Energy": 1
}

def convert_cell(item):
    name, amount = item.split("=")
    amount = int(amount)
    return cell_conversions[name], amount - starting_assumptions.get(name, 0)


def parse_conditions(path_data):
    option = path_data[0]
    conditions = path_data[1:]
    conditions = tuple(convert_cell(item) if "=" in item else item for item in conditions)
    return option, conditions


regions_data = {}
for name, data in sorted(result["homes"].items()):
    current_region = regions_data[name] = set()
    conns = data["conns"]
    for conn, conn_data in conns.items():
        conntype = conn_data["type"]
        if conntype == "pickup":  # location
            current_region.add(conn)
            if conn_data["paths"]:
                for path in conn_data["paths"]:
                    option, conditions = parse_conditions(path)
                    location_rules.setdefault(option, {}).setdefault(conn, set()).add(frozenset(conditions))

        elif conntype == "conn":  # inter-region connection
            connectors.setdefault(name, set()).add(conn)
            if conn_data["paths"]:
                for path in conn_data["paths"]:
                    option, conditions = parse_conditions(path)
                    connection_rules.setdefault(name, {}).setdefault(option, {}).setdefault(conn, set()).add(frozenset(conditions))
        else:
            raise Exception(f"unrecognized conntype {conntype}")

info="""# generated by https://github.com/Berserker66/ori_rando_server
# do not edit manually"""

template_data = {
    "locations": locations_data,
    "info": info,
    "regions_data": {region_name: locations for region_name, locations in regions_data.items()},
    "location_rules": location_rules,
    "items": items,
    "default_pool": dict(default_pool),
    "connection_rules": connection_rules,
    "connectors": connectors
}

for template in os.listdir("Templates"):
    try:
        rendered = Template(open(os.path.join("Templates", template), "r").read()).render(**template_data)
        with open(template, "w") as f:
            f.write(rendered)
    except Exception as e:
        import traceback
        traceback.print_exc()